from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from data.database import add_user, get_all_nannies, get_nanny, get_owner_bookings, get_nanny_bookings

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    add_user(user.id, user.username or user.first_name)
    
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—è–Ω—å –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        " /view_nannies - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω—è–Ω—å\n"
        " /become_nanny - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –Ω—è–Ω—è\n"
        " /login - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –Ω—è–Ω—è\n"
        " /myinfo - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ–±–µ\n"
        " /my_bookings - –ú–æ–∏ –∑–∞–∫–∞–∑—ã\n"
        " /search - –ü–æ–∏—Å–∫ –Ω—è–Ω—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n"
        " /help - –ü–æ–º–æ—â—å –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º"
    )
    await update.message.reply_text(text)

async def view_nannies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    nannies = get_all_nannies()
    if not nannies:
        await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω—è–Ω—å.")
        return
    
    text = " –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω—è–Ω—å –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤:\n\n"
    
    for i, nanny in enumerate(nannies, 1):
        rating_stars = "‚≠ê" * int(nanny['rating']) if nanny['rating'] else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
        text += (
            f"{i}. {nanny['name']}, {nanny['city']}\n"
            f"–û–ø—ã—Ç: {nanny['experience']} –ª–µ—Ç | –†–µ–π—Ç–∏–Ω–≥: {rating_stars}\n"
            f"–¢–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤: {', '.join(nanny['pet_types']) if nanny['pet_types'] else '–í—Å–µ'}\n"
            f"–¶–µ–Ω–∞: {nanny['hourly_rate']} ‚Ç∏/—á–∞—Å\n\n"
        )
        
   
        buttons = []
        for i, nanny in enumerate(nannies, 1):
            buttons.append([InlineKeyboardButton(
                f"{nanny['name']} ({nanny['city']})",
                callback_data=f"nanny_{nanny['user_id']}"
            )])
        
        reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_text(text, reply_markup=reply_markup)

async def nanny_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    nanny_id = int(query.data.split('_')[1])
    nanny = get_nanny(nanny_id)
    if not nanny:
        await query.edit_message_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω—è–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    rating_stars = "‚≠ê" * int(nanny['rating']) if nanny['rating'] else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
    text = (
        f"{nanny['name']} –∏–∑ {nanny['city']}\n\n"
        f"–û–ø—ã—Ç: {nanny['experience']} –ª–µ—Ç\n"
        f" –†–µ–π—Ç–∏–Ω–≥: {rating_stars}\n"
        f"–¢–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤: {', '.join(nanny['pet_types']) if nanny['pet_types'] else '–í—Å–µ'}\n"
        f" –¶–µ–Ω–∞: {nanny['hourly_rate']} ‚Ç∏/—á–∞—Å\n\n"
        f" –û —Å–µ–±–µ: {nanny['description']}\n\n"
    )
    
    buttons = [
        [InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"book_{nanny_id}")],
        [InlineKeyboardButton(" –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="nannies_list")]
    ]
    
    reply_markup = InlineKeyboardMarkup(buttons)
    await query.edit_message_text(text, reply_markup=reply_markup)

async def myinfo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    
    user_id = update.effective_user.id
    nanny = get_nanny(user_id)
    
    if nanny:
        rating_stars = "‚≠ê" * int(nanny['rating']) if nanny['rating'] else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
        text = (
            f" –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–±–µ:\n\n"
            f"–ò–º—è: {nanny['name']}\n"
            f"–ì–æ—Ä–æ–¥: {nanny['city']}\n"
            f"–û–ø—ã—Ç: {nanny['experience']} –ª–µ—Ç\n"
            f"–†–µ–π—Ç–∏–Ω–≥: {rating_stars}\n"
            f"–¢–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤: {', '.join(nanny['pet_types']) if nanny['pet_types'] else '–í—Å–µ'}\n"
            f"–¶–µ–Ω–∞: {nanny['hourly_rate']} ‚Ç∏/—á–∞—Å\n"
            f"–°—Ç–∞—Ç—É—Å: {'–î–æ—Å—Ç—É–ø–µ–Ω' if nanny['available'] else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}\n\n"
            f"–û —Å–µ–±–µ: {nanny['description']}\n"
        )
        
        buttons = [
            [InlineKeyboardButton(" –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="edit_profile")],
            [InlineKeyboardButton(" –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="toggle_status")]
        ]
        
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(text, reply_markup=reply_markup)
    else:
        text = "üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –Ω—è–Ω—è —á–µ—Ä–µ–∑ /become_nanny."
        await update.message.reply_text(text)

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):

    user_id = update.effective_user.id
    nanny = get_nanny(user_id)
    
    if nanny:
        bookings = get_nanny_bookings(user_id)
        if not bookings:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return
        
        text = " –í–∞—à–∏ –∑–∞–∫–∞–∑—ã –∫–∞–∫ –Ω—è–Ω–∏:\n\n"
        
        for booking in bookings:
            start = booking['start_time'].strftime("%d.%m.%Y %H:%M")
            end = booking['end_time'].strftime("%d.%m.%Y %H:%M")
            
            text += (
                f" –ó–∞–∫–∞–∑ #{booking['id']}\n"
                f" –ö–ª–∏–µ–Ω—Ç: {booking['owner_name']}\n"
                f" –í—Ä–µ–º—è: {start} - {end}\n"
                f" –ê–¥—Ä–µ—Å: {booking['address']}\n"
                f" –ü–∏—Ç–æ–º–µ—Ü: {booking['pet_details']}\n"
                f" –°—Ç–∞—Ç—É—Å: {booking['status']}\n\n"
            )
        
        await update.message.reply_text(text)
    else:
        bookings = get_owner_bookings(user_id)
        if not bookings:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_nannies —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω—è–Ω—é.")
            return
        
        text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∏—Ç–æ–º—Ü–∞:\n\n"
        
        for booking in bookings:
            start = booking['start_time'].strftime("%d.%m.%Y %H:%M")
            end = booking['end_time'].strftime("%d.%m.%Y %H:%M")
            
            text += (
                f" –ó–∞–∫–∞–∑ #{booking['id']}\n"
                f" –ù—è–Ω—è: {booking['nanny_name']}\n"
                f" –í—Ä–µ–º—è: {start} - {end}\n"
                f" –ê–¥—Ä–µ—Å: {booking['address']}\n"
                f" –ü–∏—Ç–æ–º–µ—Ü: {booking['pet_details']}\n"
                f" –°—Ç–∞—Ç—É—Å: {booking['status']}\n\n"
            )
        
        await update.message.reply_text(text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    text = (
        "üêæ –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –Ω—è–Ω–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ üêæ\n\n"
        "–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–∏—Ç–æ–º—Ü–µ–≤:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /view_nannies –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω—è–Ω—å\n"
        "2. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º –Ω—è–Ω–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π\n"
        "3. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_bookings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω—è–Ω—å –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º\n\n"
        
        "–î–ª—è –Ω—è–Ω—å:\n"
        "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /become_nanny –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –Ω—è–Ω—è\n"
        "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myinfo –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /my_bookings –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "5. –ù–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å' —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å–µ–±—è –¥–æ—Å—Ç—É–ø–Ω—ã–º/–Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–º\n\n"
        
        "–û–±—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "- /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "- /cancel - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "- /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(text)