
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import CommandHandler, ConversationHandler, MessageHandler, filters, ContextTypes
from data.database import get_all_nannies
SEARCH_CITY, SEARCH_PET_TYPE, SEARCH_MIN_RATING = range(3)

async def search_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'search_params' in context.user_data:
        del context.user_data['search_params']
    
    context.user_data['search_params'] = {}

    keyboard = [
        ['–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞'],
        ['–®—ã–º–∫–µ–Ω—Ç', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞','O—Å–∫–µ–º–µ–Ω'],
        ['–í–µ–∑–¥–µ (–ª—é–±–æ–π –≥–æ—Ä–æ–¥)']
    ]
    
    await update.message.reply_text(
        "üîç –ü–æ–∏—Å–∫ –Ω—è–Ω—å –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return SEARCH_CITY

async def search_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text
    
    if city != '–í–µ–∑–¥–µ (–ª—é–±–æ–π –≥–æ—Ä–æ–¥)':
        context.user_data['search_params']['city'] = city
    
    keyboard = [
        ['üê∂ –°–æ–±–∞–∫–∏', 'üê± –ö–æ—à–∫–∏'],
        ['üê¶ –ü—Ç–∏—Ü—ã', 'üêπ –ì—Ä—ã–∑—É–Ω—ã'],
        ['üê† –†—ã–±–∫–∏', 'ü¶é –†–µ–ø—Ç–∏–ª–∏–∏'],
        ['–õ—é–±–æ–π –ø–∏—Ç–æ–º–µ—Ü']
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–æ–º—Ü–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return SEARCH_PET_TYPE

async def search_pet_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pet_choice = update.message.text
    
    if pet_choice != '–õ—é–±–æ–π –ø–∏—Ç–æ–º–µ—Ü':
        pet_type = pet_choice.split()[-1]
        context.user_data['search_params']['pet_type'] = pet_type
    
   
    keyboard = [
        ['‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (5)', '‚≠ê‚≠ê‚≠ê‚≠ê (4+)'],
        ['‚≠ê‚≠ê‚≠ê (3+)', '‚≠ê‚≠ê (2+)'],
        ['–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥']
    ]
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω—è–Ω–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
    return SEARCH_MIN_RATING

async def search_min_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rating_choice = update.message.text
    if '–õ—é–±–æ–π —Ä–µ–π—Ç–∏–Ω–≥' not in rating_choice:
        if '(5)' in rating_choice:
            min_rating = 5.0
        elif '(4+)' in rating_choice:
            min_rating = 4.0
        elif '(3+)' in rating_choice:
            min_rating = 3.0
        elif '(2+)' in rating_choice:
            min_rating = 2.0
        else:
            min_rating = 0.0
        
        context.user_data['search_params']['min_rating'] = min_rating
    search_params = context.user_data['search_params']
    city = search_params.get('city')
    pet_type = search_params.get('pet_type')
    min_rating = search_params.get('min_rating')
    
    nannies = get_all_nannies(city, pet_type, min_rating)
    
    if not nannies:
        await update.message.reply_text(
            "üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω—è–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥–æ–π /search.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    

    text = "üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω—è–Ω—å:\n\n"
    
    for i, nanny in enumerate(nannies, 1):
        rating_stars = "‚≠ê" * int(nanny['rating']) if nanny['rating'] else "–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤"
        text += (
            f"{i}. {nanny['name']}, {nanny['city']}\n"
            f"   –û–ø—ã—Ç: {nanny['experience']} –ª–µ—Ç | –†–µ–π—Ç–∏–Ω–≥: {rating_stars}\n"
            f"   üêæ –¢–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤: {', '.join(nanny['pet_types']) if nanny['pet_types'] else '–í—Å–µ'}\n"
            f"   üí∞ –¶–µ–Ω–∞: {nanny['hourly_rate']} ‚Ç∏/—á–∞—Å\n\n"
        )
    
    buttons = []
    for i, nanny in enumerate(nannies, 1):
        buttons.append([InlineKeyboardButton(
            f"{nanny['name']} ({nanny['city']})",
            callback_data=f"nanny_{nanny['user_id']}"
        )])
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        reply_to_message=ReplyKeyboardRemove()
    )
    
    return ConversationHandler.END

async def search_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


search_conv = ConversationHandler(
    entry_points=[CommandHandler('search', search_start)],
    states={
        SEARCH_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_city)],
        SEARCH_PET_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_pet_type)],
        SEARCH_MIN_RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, search_min_rating)]
    },
    fallbacks=[CommandHandler('cancel', search_cancel)]
)