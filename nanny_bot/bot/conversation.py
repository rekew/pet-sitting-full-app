from __future__ import annotations
import re
from typing import Final
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (CommandHandler, ContextTypes, ConversationHandler,
                          MessageHandler, filters)
from data.database import add_nanny, add_user, get_nanny

(
    BECOME_NANNY_NAME,
    BECOME_NANNY_CITY,
    BECOME_NANNY_EXP,
    BECOME_NANNY_PETS,
    BECOME_NANNY_RATE,
    BECOME_NANNY_DESC,
    BECOME_NANNY_PASSWORD,
) = range(7)

MAX_DESC_LEN: Final = 200

async def nanny_registration_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id

    
    if get_nanny(user_id):
        await update.message.reply_text("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω—è–Ω—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myinfo.")
        return ConversationHandler.END

    
    user_username = user.username or f"user_{user_id}"

    
    add_user(user_id, user_username)
    context.user_data["nanny_info"] = {"username": user_username}

    await update.message.reply_text(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω—è–Ω–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤ üêæ\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ *–∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é*:",
        parse_mode="Markdown",
    )
    return BECOME_NANNY_NAME

async def nanny_registration_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nanny_info"]["name"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥:")
    return BECOME_NANNY_CITY

async def nanny_registration_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["nanny_info"]["city"] = update.message.text.strip()
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–∏—Ç–æ–º—Ü–∞–º–∏ (–≤ –≥–æ–¥–∞—Ö):")
    return BECOME_NANNY_EXP


async def nanny_registration_exp(update: Update, context: ContextTypes.DEFAULT_TYPE):
    experience = update.message.text.strip()
    if not experience.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 2")
        return BECOME_NANNY_EXP

    context.user_data["nanny_info"]["experience"] = int(experience)

    keyboard = [
        ["üê∂ –°–æ–±–∞–∫–∏", "üê± –ö–æ—à–∫–∏"],
        ["üê¶ –ü—Ç–∏—Ü—ã", "üêπ –ì—Ä—ã–∑—É–Ω—ã"],
        ["üê† –†—ã–±–∫–∏", "ü¶é –†–µ–ø—Ç–∏–ª–∏–∏"],
        ["–í—Å–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤"],
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True),
    )
    return BECOME_NANNY_PETS


async def nanny_registration_pets(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pet_choice = update.message.text
    if pet_choice == "–í—Å–µ —Ç–∏–ø—ã –ø–∏—Ç–æ–º—Ü–µ–≤":
        pet_types = ["–°–æ–±–∞–∫–∏", "–ö–æ—à–∫–∏", "–ü—Ç–∏—Ü—ã", "–ì—Ä—ã–∑—É–Ω—ã", "–†—ã–±–∫–∏", "–†–µ–ø—Ç–∏–ª–∏–∏"]
    else:
        pet_types = [re.sub(r"[^\w\s]", "", pet_choice).strip()]

    context.user_data["nanny_info"]["pet_types"] = pet_types
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á–∞—Å–æ–≤—É—é —Å—Ç–∞–≤–∫—É –≤ —Ç–µ–Ω–≥–µ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=ReplyKeyboardRemove(),
    )
    return BECOME_NANNY_RATE


async def nanny_registration_rate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    rate = update.message.text.strip()
    if not rate.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤. –ù–∞–ø—Ä–∏–º–µ—Ä: 2000")
        return BECOME_NANNY_RATE

    context.user_data["nanny_info"]["hourly_rate"] = int(rate)
    await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –æ–ø—ã—Ç –∏ —É—Å–ª—É–≥–∏ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤):")
    return BECOME_NANNY_DESC


async def nanny_registration_desc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text.strip()
    if len(description) > MAX_DESC_LEN:
        await update.message.reply_text(
            f"–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ {MAX_DESC_LEN} —Å–∏–º–≤–æ–ª–æ–≤.")
        return BECOME_NANNY_DESC

    context.user_data["nanny_info"]["description"] = description
    await update.message.reply_text("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:")
    return BECOME_NANNY_PASSWORD


async def nanny_registration_password(update: Update, context: ContextTypes.DEFAULT_TYPE):
    password = update.message.text
    if len(password) < 4:
        await update.message.reply_text("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return BECOME_NANNY_PASSWORD

    context.user_data["nanny_info"]["password"] = password

    add_nanny(update.effective_user.id, context.user_data["nanny_info"])

    await update.message.reply_text(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /myinfo –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏ /login –¥–ª—è –≤—Ö–æ–¥–∞.")
    return ConversationHandler.END

async def nanny_registration_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

nanny_registration_conv = ConversationHandler(
    entry_points=[CommandHandler("become_nanny", nanny_registration_start)],
    states={
        BECOME_NANNY_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_name)],
        BECOME_NANNY_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_city)],
        BECOME_NANNY_EXP: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_exp)],
        BECOME_NANNY_PETS: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_pets)],
        BECOME_NANNY_RATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_rate)],
        BECOME_NANNY_DESC: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_desc)],
        BECOME_NANNY_PASSWORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, nanny_registration_password)],
    },
    fallbacks=[CommandHandler("cancel", nanny_registration_cancel)],
    name="nanny_registration_conv",
    persistent=False,
)
